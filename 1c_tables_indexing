USE [<DB NAME>]
GO
declare some_cursor cursor FOR
SELECT top(100)
  migs.avg_total_user_cost * (migs.avg_user_impact / 100.0) * (migs.user_seeks + migs.user_scans) AS improvement_measure, 
  'missing_index_' + CONVERT (varchar, mig.index_group_handle) + '_' + CONVERT (varchar, mid.index_handle) 
  + '_' + LEFT (PARSENAME(mid.statement, 1), 32) as index_name,
  LEFT (PARSENAME(mid.statement, 1), 32) as table_name,
  DB_NAME (mid.database_id) as database_name,

  'if not exists (select * from ['+DB_NAME (mid.database_id)+'].[dbo].sysindexes  where name='''+ 
		--index_name
		'missing_index_' + CONVERT (varchar, mig.index_group_handle) + '_' + CONVERT (varchar, mid.index_handle) 
		+ '_' + LEFT (PARSENAME(mid.statement, 1), 32)+
    ''') ' +
' CREATE INDEX [missing_index_' + CONVERT (varchar, mig.index_group_handle) + '_' + CONVERT (varchar, mid.index_handle) 
  + '_' + LEFT (PARSENAME(mid.statement, 1), 32) + ']'
  + ' ON ' + mid.statement 
  + ' (' + ISNULL (mid.equality_columns,'') 
    + CASE WHEN mid.equality_columns IS NOT NULL AND mid.inequality_columns IS NOT NULL THEN ',' ELSE '' END 
    + ISNULL (mid.inequality_columns, '')
  + ')' 
  + ISNULL (' INCLUDE (' + mid.included_columns + ')', '') AS create_index_if_exists_statement,


  'CREATE INDEX [missing_index_' + CONVERT (varchar, mig.index_group_handle) + '_' + CONVERT (varchar, mid.index_handle) 
  + '_' + LEFT (PARSENAME(mid.statement, 1), 32) + ']'
  + ' ON ' + mid.statement 
  + ' (' + ISNULL (mid.equality_columns,'') 
    + CASE WHEN mid.equality_columns IS NOT NULL AND mid.inequality_columns IS NOT NULL THEN ',' ELSE '' END 
    + ISNULL (mid.inequality_columns, '')
  + ')' 
  + ISNULL (' INCLUDE (' + mid.included_columns + ')', '') AS create_index_statement, 
  migs.*, mid.database_id, mid.[object_id]
  

FROM sys.dm_db_missing_index_groups mig
INNER JOIN sys.dm_db_missing_index_group_stats migs ON migs.group_handle = mig.index_group_handle
INNER JOIN sys.dm_db_missing_index_details mid ON mig.index_handle = mid.index_handle
WHERE migs.avg_total_user_cost * (migs.avg_user_impact / 100.0) * (migs.user_seeks + migs.user_scans) > 10
ORDER BY migs.avg_total_user_cost * migs.avg_user_impact * (migs.user_seeks + migs.user_scans) DESC;

open some_cursor
declare  @counter int
declare  @improvement_measure float, @index_name varchar,	@table_name varchar(MAX),	@database_name varchar(MAX),	@create_index_if_exists_statement varchar(MAX),	@create_index_statement varchar(MAX),	@group_handle float,	@unique_compiles float,	@user_seeks float,	@user_scans float,	@last_user_seek datetime,	@last_user_scan datetime,	@avg_total_user_cost float,	@avg_user_impact float,	@system_seeks float,	@system_scans float,	@last_system_seek datetime,	@last_system_scan datetime,	@avg_total_system_cost float,	@avg_system_impact float,	@database_id float,	@object_id float
set @counter = 0
-- выборка первой  строки
fetch next from some_cursor INTO @improvement_measure, @index_name,	@table_name, @database_name,	@create_index_if_exists_statement,	@create_index_statement,	@group_handle,	@unique_compiles,	@user_seeks,	@user_scans,	@last_user_seek,	@last_user_scan,	@avg_total_user_cost,	@avg_user_impact,	@system_seeks,	@system_scans,	@last_system_seek,	@last_system_scan,	@avg_total_system_cost,	@avg_system_impact,	@database_id,	@object_id
-- цикл с логикой и выборкой всех последующих строк после первой
while @@FETCH_STATUS = 0
begin
--- логика внутри цикла
set @counter = @counter + 1
if @counter >= 100 break  -- возможный код для проверки работы, прерываем после пятой итерации
DECLARE @SQL varchar(MAX)
SET @SQL = @create_index_if_exists_statement
exec(@SQL)
-- выборка следующей строки
fetch next from some_cursor INTO  @improvement_measure, @index_name,	@table_name,	@database_name,	@create_index_if_exists_statement,	@create_index_statement,	@group_handle,	@unique_compiles,	@user_seeks,	@user_scans,	@last_user_seek,	@last_user_scan,	@avg_total_user_cost,	@avg_user_impact,	@system_seeks,	@system_scans,	@last_system_seek,	@last_system_scan,	@avg_total_system_cost,	@avg_system_impact,	@database_id,	@object_id
-- завершение логики внутри цикла
end
--select @counter as final_count
-- закрываем курсор
close some_cursor
deallocate some_cursor
